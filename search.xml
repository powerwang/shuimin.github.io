<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JDK线程池原理]]></title>
    <url>%2Fshuimin.github.io%2F2017%2F08%2F29%2FJDK%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[一、线程池概要线程池就是一个用来管理线程和复用线程集中工厂，它可以降低系统资源开销、快速启动任务和线程上限控制。 初始化线程池规定池核心大小和最大线程数,当execute将任务塞到线程池 任务插入流程，如果没有超过核心线程数新建worker,如果超过将任务插入到队列，如果队列满了，检查没有超过最大线程数，没有超过再 new worker ,如果超过执行处理策略，默认是直接报错。 其中任务队列是通过BlockingQueue 的take(没有设置超时时间，worker一直阻塞，直到有任务为止)，poll 可以设置等待超时时间，如果时间范围内没有任务就返回null，worker 如果收到null,就直接释放结束。 二、设计思路1、线程池设计初衷是为了解决线程统一管理，将任务和执行体分离，实现可以对执行体的容量规划和生命周期进行统一管理，实现不用泛滥新建线程。2、容量管理：分为执行体（worker）容量和任务队列容量，策略分别是优先满足核心执行体容量&gt;任务队列容量&gt;最大执行体容器&gt;自我保护pocily。3、生产模式：所有执行体(worker)共享任务列表。4、超时协议（timeout）：执行体在某些策略场景下执行超时释放。 三、源码分析1、新建线程池新建一个线程池，初始化容量、超时机制、异常自我保护策略做最后兜底 12345678910111213141516171819202122public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) &#123; if (corePoolSize &lt; 0 || maximumPoolSize &lt;= 0 || maximumPoolSize &lt; corePoolSize || keepAliveTime &lt; 0) throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null) throw new NullPointerException(); this.corePoolSize = corePoolSize; // 核心执行体数量 this.maximumPoolSize = maximumPoolSize; // 最大执行体数量，只有当任务容量满足不了，才进行扩容 this.workQueue = workQueue; // 任务队列 this.keepAliveTime = unit.toNanos(keepAliveTime); // 超时时间 this.threadFactory = threadFactory; //线程工厂 this.handler = handler; // 自我保护策略 &#125; 关于 ThreadFactory 工作原理，可以参考：todo 1、新建任务1234567891011121314151617181920212223242526public void execute(Runnable command) &#123; if (command == null) throw new NullPointerException(); // 获取当前running 线程数 int c = ctl.get(); // 1、当执行体数量小于核心线程数，新建执行体 if (workerCountOf(c) &lt; corePoolSize) &#123; if (addWorker(command, true)) return; c = ctl.get(); &#125; //2、线程池running,如果任务队列未满，则将任务插入到队列，如果队列已经满了,则new worker,如果worker 数量大于最大数量时，执行保护策略。 if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123; int recheck = ctl.get(); //todo 如果线程池不在执行状态，而且移除任务，则执行拒绝策略 if (! isRunning(recheck) &amp;&amp; remove(command)) reject(command); // 如果worker数量=0，则新建一个空执行体 else if (workerCountOf(recheck) == 0) addWorker(null, false); &#125; //如果队列满，而且没有超过最大执行体数，新建执行体，超过执行体数，则执行拒绝策略 else if (!addWorker(command, false)) reject(command); &#125; 2、新建worker1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768private boolean addWorker(Runnable firstTask, boolean core) &#123; retry: for (;;) &#123; int c = ctl.get(); int rs = runStateOf(c); // 线程池状态为下线、停止、清理、终止 直接返回，但是线程池状态为下线、执行体为空、队列有任务可以跳过 if (rs &gt;= SHUTDOWN &amp;&amp; ! (rs == SHUTDOWN &amp;&amp; firstTask == null &amp;&amp; ! workQueue.isEmpty())) return false; // 如果超过执行体数，直接返回false,其他更新执行体数量，成功提出循环，失败则判断线程池状态有没有变，变了，从头执行，没有变，则一直执行更新执行体数量 for (;;) &#123; int wc = workerCountOf(c); if (wc &gt;= CAPACITY || wc &gt;= (core ? corePoolSize : maximumPoolSize)) return false; // cas 更新 if (compareAndIncrementWorkerCount(c)) break retry; c = ctl.get(); // Re-read ctl // 线程池状态变，则从头执行，否则内部遍历 if (runStateOf(c) != rs) continue retry; // else CAS failed due to workerCount change; retry inner loop &#125; &#125; boolean workerStarted = false; boolean workerAdded = false; Worker w = null; try &#123; w = new Worker(firstTask); final Thread t = w.thread; if (t != null) &#123; final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try &#123; // Recheck while holding lock. // Back out on ThreadFactory failure or if // shut down before lock acquired. int rs = runStateOf(ctl.get()); if (rs &lt; SHUTDOWN || (rs == SHUTDOWN &amp;&amp; firstTask == null)) &#123; if (t.isAlive()) // precheck that t is startable throw new IllegalThreadStateException(); workers.add(w); int s = workers.size(); if (s &gt; largestPoolSize) largestPoolSize = s; workerAdded = true; &#125; &#125; finally &#123; mainLock.unlock(); &#125; if (workerAdded) &#123; t.start(); workerStarted = true; &#125; &#125; &#125; finally &#123; if (! workerStarted) addWorkerFailed(w); &#125; return workerStarted; &#125; 关于AtomicInteger原理，可以参考：todo关于ReentrantLock原理，可以参考：todo break、return、contine的区别备注：for 循环中break 退出for循环，return 直接方法体返回，contine 跳过当前执行流程进入下一次执行。 3、worker消费任务队列1234567891011121314151617181920212223242526272829303132333435363738394041424344final void runWorker(Worker w) &#123; Thread wt = Thread.currentThread(); Runnable task = w.firstTask; w.firstTask = null; w.unlock(); // allow interrupts boolean completedAbruptly = true; try &#123; //task 阻塞在gettask，如果获取task=null,worker释放，不为null,执行任务 while (task != null || (task = getTask()) != null) &#123; w.lock(); // If pool is stopping, ensure thread is interrupted; // if not, ensure thread is not interrupted. This // requires a recheck in second case to deal with // shutdownNow race while clearing interrupt if ((runStateAtLeast(ctl.get(), STOP) || (Thread.interrupted() &amp;&amp; runStateAtLeast(ctl.get(), STOP))) &amp;&amp; !wt.isInterrupted()) wt.interrupt(); try &#123; beforeExecute(wt, task); Throwable thrown = null; try &#123; task.run(); &#125; catch (RuntimeException x) &#123; thrown = x; throw x; &#125; catch (Error x) &#123; thrown = x; throw x; &#125; catch (Throwable x) &#123; thrown = x; throw new Error(x); &#125; finally &#123; afterExecute(task, thrown); &#125; &#125; finally &#123; task = null; w.completedTasks++; w.unlock(); &#125; &#125; completedAbruptly = false; &#125; finally &#123; processWorkerExit(w, completedAbruptly); &#125; &#125; while执行任务，通过阻塞在getTask，如果task为null,则释放worker. AQS 分析 todo 3、task任务队列1234567891011121314151617181920212223242526272829303132333435363738private Runnable getTask() &#123; boolean timedOut = false; // Did the last poll() time out? for (;;) &#123; int c = ctl.get(); int rs = runStateOf(c); // 如果线程池关闭或者任务未0，释放worker // 如果线程池任务为关闭，则直接释放 if (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123; decrementWorkerCount(); return null; &#125; int wc = workerCountOf(c); // Are workers subject to culling? boolean timed = allowCoreThreadTimeOut || wc &gt; corePoolSize; if ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut)) &amp;&amp; (wc &gt; 1 || workQueue.isEmpty())) &#123; if (compareAndDecrementWorkerCount(c)) return null; continue; &#125; try &#123; Runnable r = timed ? workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : workQueue.take(); if (r != null) return r; timedOut = true; &#125; catch (InterruptedException retry) &#123; timedOut = false; &#125; &#125; &#125; 如果任务有设置超时时间，通过queue的poll建立超时返回机制，没有的话直接使用take一直阻塞。关于LinkedBlockingQueue，可以参考：LinkedBlockingQueue 原理分析]]></content>
      <categories>
        <category>线程池</category>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[集群流控系统思考]]></title>
    <url>%2Fshuimin.github.io%2F2017%2F08%2F29%2F%E9%9B%86%E7%BE%A4%E6%B5%81%E9%87%8F%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[一、业务诉求 实现流量统计，当流量达到某一个阀值点，进行阀值处理策略，可以应用于反爬虫、阶段热点等业务场景 二、架构粗暴架构：将url+时间点为key,放到缓存中，每次请求过来，去check一下有没有达到阀值点。风险： 缓存qps会非常大，缓存可能会被击穿。 具有读又有写，业务请求强耦合流控系统缓存，将会形成单点问题。 大并发架构：将系统拆分为：流量计数、流控策略、策略同步 流程计数：流量进来，先通过消息异步化，到流量计数模块，流量计数模块按url+分钟+业务为key,缓存到本地，然后定时刷新到redis。好处：通过消息缓冲避免出现redis请求毛刺，再通过本地缓存避免每次消息消费对redis资源依赖，减少消息堆积风险和redis数据更新压力。 基本链路：流量-&gt;消息-&gt;本地缓存计数-&gt;分布式缓存 流控策略：当流程计数触发到阀值，server将其广播到client,client根据自己配置策略，进行拦截、报错等自定义自我处理策略 server只是负责阀值识别，不做策略处理，将策略处理是否到client,好处：可以解耦防止业务系统对中间件强依赖；还可以实现不同client差异化处理策略 流程同步:可以通过消息广播或者ZK等等方式]]></content>
      <categories>
        <category>架构</category>
        <category>流控</category>
      </categories>
      <tags>
        <tag>流控</tag>
      </tags>
  </entry>
</search>
